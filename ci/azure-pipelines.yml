name: Deeproxio.Application-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - "*"

pool:
  name: Development
  demands: npm

variables:
- group: Local-Harbor-Registry
- name: ciImageTag
  value: 'ci-$(Build.BuildId)'
- name: helmRepositoryName
  value: 'dpio-application-chart'
- name: serviceImageName
  value: dpio-application
- name: releaseName
  value: web-application

stages:
  - stage: 'Build'
    displayName: 'Build Application & Docker Images'
    jobs:
    - job: 'Build'
      displayName: 'Build Deeproxio.Application'
      pool: Development
      variables: {}
      steps:

      - task: Npm@1
        inputs:
          verbose: false
        displayName: 'npm install'

      - task: Npm@1
        inputs:
          command: custom
          verbose: true
          customCommand: 'run lint'
        displayName: 'npm lint'

      - task: Npm@1
        inputs:
          command: custom
          verbose: true
          customCommand: 'run test:ci'
        displayName: 'npm test'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
          testResultsFiles: 'junit.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
          failTaskOnFailedTests: true # Optional
          testRunTitle: dpio-application-$(ciImageTag)# Optional

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/my-app/cobertura-coverage.xml'

      - task: Npm@1
        inputs:
          command: custom
          verbose: true
          customCommand: 'run build'
        displayName: 'npm build'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: dist
          ArtifactName: Deeproxio.App
        displayName: Publish Deeproxio.App Artifact

      - script: >-
          docker build -f ./Dockerfile
          -t $(harbor_endpoint)/$(serviceImageName):latest
          -t $(harbor_endpoint)/$(serviceImageName):$(ciImageTag) .
        displayName: 'docker image build'

      - script: >-
          docker login
          -u $(harbor_username)
          -p $(harbor_password)
          $(harbor_endpoint)
        displayName: 'docker login (Local Harbor Registry)'

      - script: >-
          docker push $(harbor_endpoint)/$(serviceImageName):latest &&
          docker push $(harbor_endpoint)/$(serviceImageName):$(ciImageTag)
        displayName: 'push docker image'

      - script: >-
          helm lint ./chart/$(serviceImageName)
          --debug
          --logtostderr
        displayName: 'Helm Chart static analysis'

      - script: >-
          helm package ./chart/$(serviceImageName)
          --logtostderr
          --dependency-update
          --app-version $(ciImageTag)
          --destination $(Build.ArtifactStagingDirectory)
        displayName: 'Helm Chart package build'

      - script: >-
          helm registry login
          -u $(harbor_username)
          -p $(harbor_password)
          $(harbor_endpoint)
        displayName: 'helm login (Local Harbor Registry)'

      - script: >-
          helm chart save
          ./chart/$(serviceImageName)
          $(harbor_endpoint)/$(helmRepositoryName):$(ciImageTag)
        displayName: 'Save Helm Chart to Local Harbor Registry'

      - script: >-
          helm chart push
          $(harbor_endpoint)/$(helmRepositoryName):$(ciImageTag)
        displayName: 'Push Helm Chart to Local Harbor Registry'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: $(serviceImageName).helm-chart
        displayName: 'Upload Helm Build Artifacts'

  - stage: 'Local'
    displayName: 'Deploy to dpio-local environment'
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: Deploy
      pool: Development
      environment: dpio-local
      variables:
      - group: dpio-local-settings
      - group: dpio-platform-endpoint-paths
      strategy:
        runOnce:
          deploy:
            steps:

              - template: stage-deployment.yml
                parameters:
                  harbor_username: $(harbor_username)
                  harbor_password: $(harbor_password)
                  harbor_endpoint: $(harbor_endpoint)
                  helmRepositoryName: $(helmRepositoryName)
                  serviceImageName: $(serviceImageName)
                  ciImageTag: $(ciImageTag)
                  imagePullSecretName: $(imagePullSecretName)
                  namespace: $(namespace)
                  host: $(host)
                  applicationPath: $(applicationPath)
                  releaseName: $(releaseName)

  - stage: 'Staging'
    displayName: 'Deploy to dpio-staging environment'
    dependsOn: Local
    condition: |
      and
      (
        succeeded(),
        or
        (
          eq(variables['Build.SourceBranchName'], 'main')
        )
      )
    jobs:
    - deployment: Deploy
      pool: Development
      environment: dpio-staging
      variables:
      - group: dpio-staging-settings
      - group: dpio-platform-endpoint-paths
      strategy:
        runOnce:
          deploy:
            steps:

              - template: stage-deployment.yml
                parameters:
                  harbor_username: $(harbor_username)
                  harbor_password: $(harbor_password)
                  harbor_endpoint: $(harbor_endpoint)
                  helmRepositoryName: $(helmRepositoryName)
                  serviceImageName: $(serviceImageName)
                  ciImageTag: $(ciImageTag)
                  imagePullSecretName: $(imagePullSecretName)
                  namespace: $(namespace)
                  host: $(host)
                  applicationPath: $(applicationPath)
                  releaseName: $(releaseName)
